<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://ofbiz.apache.org/Simple-Method" xsi:schemaLocation="http://ofbiz.apache.org/Simple-Method http://ofbiz.apache.org/dtds/simple-methods.xsd">


    <simple-method method-name="createCommunicationEventWithPermission" short-description="Create a CommunicationEvent with permission check">
        <set field="parameters.permission" value="true"/>
        <call-simple-method method-name="createCommunicationEvent"/>
    </simple-method>

    <simple-method method-name="createCommunicationEventWithoutPermission" short-description="Create a CommunicationEvent without permission check">
        <set field="parameters.permission" value="false"/>
        <call-simple-method method-name="createCommunicationEvent"/>
    </simple-method>

    <simple-method method-name="createCommunicationEvent" short-description="Create a CommunicationEvent with or w/o permission check">
        <!-- check for forward only if created by a user and not incoming email by system-->
        <if-compare field="parameters.action" value="FORWARD" operator="equals">
            <if-not-empty field="parameters.origCommEventId">
                <entity-one entity-name="CommunicationEvent" value-field="newEntity">
                    <field-map field-name="communicationEventId" from-field="parameters.origCommEventId"/>
                </entity-one>
                <clear-field field="newEntity.communicationEventId"/>
                <clear-field field="newEntity.messageId"/>
                <clear-field field="newEntity.partyIdTo"/>
                <set field="newEntity.partyIdFrom" from-field="parameters.partyIdFrom"/>
                <set field="newEntity.subject" value="Forw: ${newEntity.subject}"/>
                <set field="newEntity.origCommEventId" from-field="parameters.origCommEventId"/>
            </if-not-empty>
        </if-compare>

        <if-empty field="newEntity">
            <make-value entity-name="CommunicationEvent" value-field="newEntity"/>
        </if-empty>
        
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        
        <if-empty field="parameters.communicationEventId">
            <sequenced-id sequence-name="CommunicationEvent" field="newEntity.communicationEventId"/>
            <else>
                <set field="newEntity.communicationEventId" from-field="parameters.communicationEventId"/>
            </else>
        </if-empty>
        <field-to-result field="newEntity.communicationEventId" result-name="communicationEventId"/>

        <!-- check for reply or reply all-->
        <if>
            <condition>
                <and>
                    <not><if-empty field="parameters.parentCommEventId"/></not>
                    <or>
                        <if-compare field="parameters.action" value="REPLY" operator="equals"/>
                        <if-compare field="parameters.action" value="REPLYALL" operator="equals"/>
                    </or>
                </and>
            </condition>
            <then>
                <entity-one entity-name="CommunicationEvent" value-field="parentCommEvent">
                    <field-map field-name="communicationEventId" from-field="parameters.parentCommEventId"/>
                </entity-one>
                <entity-one entity-name="PartyNameView" value-field="partyNameView">
                    <field-map field-name="partyId" from-field="parentCommEvent.partyIdFrom"/>
                </entity-one>
                <set field="newEntity.communicationEventTypeId" from-field="parentCommEvent.communicationEventTypeId"/>
                <if-compare field="newEntity.communicationEventTypeId" value="AUTO_EMAIL_COMM" operator="equals">
                    <set field="newEntity.communicationEventTypeId" value="EMAIL_COMMUNICATION"/>
                </if-compare>
                <set field="newEntity.partyIdFrom" from-field="parameters.partyIdFrom" default-value="parameters.userLogin.partyId"/>
                <set field="newEntity.partyIdTo" from-field="parentCommEvent.partyIdFrom"/>
                <set field="newEntity.parentCommEventId" from-field="parentCommEvent.communicationEventId"/>
                <set field="newEntity.subject" value="RE: ${parentCommEvent.subject}"/>
                <set field="newEntity.contentMimeTypeId" from-field="parentCommEvent.contentMimeTypeId"/>
                <set field="newEntity.content" value="${groovy:
                    def localContent = parentCommEvent.content;
                    if (!localContent) return(&quot;&quot;);
                    
                    resultLine = &quot;\n\n\n&quot; 
                    + (partyNameView.firstName!=null?partyNameView.firstName:&quot;&quot;) 
                    + &quot; &quot; 
                    + (partyNameView.middleName!=null?partyNameView.middleName+&quot; &quot;:&quot;&quot;) 
                    + &quot; &quot; 
                    + (partyNameView.lastName!=null?partyNameView.lastName:&quot;&quot;) 
                    + (partyNameView.groupName!=null?partyNameView.groupName:&quot;&quot;) 
                    + &quot; wrote:&quot;;
                    resultLine += &quot;\n -------------------------------------------------------------------- &quot;;
                    resultLine += &quot;\n&gt; &quot; + localContent.substring(0, localContent.indexOf(&quot;\n&quot;,0) == -1 ? localContent.length() : localContent.indexOf(&quot;\n&quot;,0));
                    startChar = localContent.indexOf(&quot;\n&quot;,0);
                    while(startChar != -1 &amp;&amp; (startChar = localContent.indexOf(&quot;\n&quot;,startChar) + 1) != 0)
                    resultLine += &quot;\n&gt; &quot; + localContent.substring(startChar, localContent.indexOf(&quot;\n&quot;,startChar)==-1 ? localContent.length() : localContent.indexOf(&quot;\n&quot;,startChar));
                    return(resultLine);
                    }"/>
                
                <!-- set role status from the parent commevent to completed -->
                <entity-and entity-name="CommunicationEventRole" list="roles">
                    <field-map field-name="communicationEventId" from-field="parentCommEvent.communicationEventId"/>
                    <field-map field-name="partyId" from-field="newEntity.partyIdFrom"/>
                </entity-and>
                <if-not-empty field="roles">
                    <first-from-list list="roles" entry="role"/>
                    <set-service-fields service-name="setCommunicationEventRoleStatus" map="role" to-map="newStat"/>
                    <set field="newStat.statusId" value="COM_ROLE_COMPLETED"/>
                    <call-service service-name="setCommunicationEventRoleStatus" in-map-name="newStat"/>
                </if-not-empty>
            </then>
        </if>
        
        <if-empty field="newEntity.statusId">
            <set value="COM_ENTERED" field="newEntity.statusId"/>
        </if-empty>

        <if-compare field="newEntity.communicationEventTypeId" value="EMAIL_COMMUNICATION" operator="equals">
            <!-- if only contactMechIdFrom and no partyIdFrom is provided for creation email address find the related party -->
            <if-empty field="newEntity.partyIdFrom">
                <if-not-empty field="newEntity.contactMechIdFrom">
                    <entity-and entity-name="PartyAndContactMech" list="partyContactMechs" filter-by-date="true">
                        <field-map field-name="contactMechId" from-field="newEntity.contactMechIdFrom"/>
                        <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
                    </entity-and>
                    <first-from-list list="partyContactMechs" entry="partyContactMech"/>
                    <set field="newEntity.partyIdFrom" from-field="partyContactMech.partyId"/>
                </if-not-empty>
            </if-empty>
            
            <!-- if partyIdFrom provided but no contactMechIdFrom get emailAddress -->
            <if-not-empty field="newEntity.partyIdFrom">
                <if-empty field="newEntity.contactMechIdFrom">
                    <set field="getEmail.partyId" from-field="newEntity.partyIdFrom"/>
                    <call-service service-name="getPartyEmail" in-map-name="getEmail">
                        <result-to-field result-name="contactMechId" field="newEntity.contactMechIdFrom"/>
                    </call-service>
                </if-empty>
            </if-not-empty>
            
            <!-- if only contactMechIdTo and no partyIdTo is provided for creation email address find the related party -->
            <if-empty field="newEntity.partyIdTo">
                <if-not-empty field="newEntity.contactMechIdTo">
                    <entity-and entity-name="PartyAndContactMech" list="partyContactMechs" filter-by-date="true">
                        <field-map field-name="contactMechId" from-field="newEntity.contactMechIdTo"/>
                        <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
                    </entity-and>
                    <first-from-list list="partyContactMechs" entry="partyContactMech"/>
                    <set field="newEntity.partyIdTo" from-field="partyContactMech.partyId"/>
                </if-not-empty>
            </if-empty>
            
            <!-- if partyId provided but no contactMechIdTo get emailAddress -->
            <if-not-empty field="newEntity.partyIdTo">
                <if-empty field="newEntity.contactMechIdTo">
                    <set field="getEmail.partyId" from-field="newEntity.partyIdTo"/>
                    <call-service service-name="getPartyEmail" in-map-name="getEmail">
                        <result-to-field result-name="contactMechId" field="newEntity.contactMechIdTo"/>
                    </call-service>
                </if-empty>
            </if-not-empty>
        </if-compare>
        
        <now-timestamp field="newEntity.entryDate"/>
        <create-value value-field="newEntity"/>

        <!-- below actions can only be done when the the commevent exists -->
        <if-compare field="parameters.action" value="REPLYALL" operator="equals">
            <entity-condition entity-name="CommunicationEventRole" list="roles">
                <condition-list combine="and">
                    <condition-expr field-name="communicationEventId" from-field="parentCommEvent.communicationEventId"/>
                    <condition-expr field-name="partyId" operator="not-equals" from-field="newEntity.partyIdTo"/>
                    <condition-expr field-name="partyId" operator="not-equals" from-field="newEntity.partyIdFrom"/>
                </condition-list>
            </entity-condition>
            <if-not-empty field="roles">
                <iterate list="roles" entry="role">
                    <set-service-fields service-name="createCommunicationEventRole" map="role" to-map="newRole"/>
                    <set field="newRole.communicationEventId" from-field="newEntity.communicationEventId"/>
                    <call-service service-name="createCommunicationEventRole" in-map-name="newRole"/>
                </iterate>
            </if-not-empty>
        </if-compare>
        
        <if-not-empty field="parameters.productId">
            <make-value entity-name="CommunicationEventProduct" value-field="eventProduct"/>
            <set from-field="parameters.productId" field="eventProduct.productId"/>
            <set from-field="newEntity.communicationEventId" field="eventProduct.communicationEventId"/>
            <create-value value-field="eventProduct"/>
        </if-not-empty>
        <if-not-empty field="parameters.orderId">
            <make-value entity-name="CommunicationEventOrder" value-field="eventOrder"/>
            <set from-field="parameters.orderId" field="eventOrder.orderId"/>
            <set from-field="newEntity.communicationEventId" field="eventOrder.communicationEventId"/>
            <create-value value-field="eventOrder"/>
        </if-not-empty>
        <if-not-empty field="parameters.returnId">
            <make-value entity-name="CommunicationEventReturn" value-field="eventReturn"/>
            <set from-field="parameters.returnId" field="eventReturn.returnId"/>
            <set from-field="newEntity.communicationEventId" field="eventReturn.communicationEventId"/>
            <create-value value-field="eventReturn"/>
        </if-not-empty>
        <if-not-empty field="parameters.custRequestId">
            <set from-field="parameters.custRequestId" field="CustRequestCommEvent.custRequestId"/>
            <set from-field="newEntity.communicationEventId" field="CustRequestCommEvent.communicationEventId"/>
            <call-service service-name="createCustRequestCommEvent" in-map-name="CustRequestCommEvent"/>
        </if-not-empty>

        <!-- partyIdTo role-->
        <if-not-empty field="newEntity.partyIdTo">
            <set field="commRole.communicationEventId" from-field="newEntity.communicationEventId"/>
            <set field="commRole.partyId" from-field="newEntity.partyIdTo"/>
            <set field="commRole.roleTypeId" value="ADDRESSEE"/>
            <set field="commRole.contactMechId" from-field="newEntity.contactMechIdTo"/>
            <call-service service-name="createCommunicationEventRoleWithoutPermission" in-map-name="commRole"/>
        </if-not-empty>

        <!-- partyIdFrom role-->
        <if-not-empty field="newEntity.partyIdFrom">
            <set field="commRole.communicationEventId" from-field="newEntity.communicationEventId"/>
            <set field="commRole.partyId" from-field="newEntity.partyIdFrom"/>
            <set field="commRole.roleTypeId" value="ORIGINATOR"/>
            <set field="commRole.contactMechId" from-field="newEntity.contactMechIdFrom"/>
            <set field="commRole.statusId" value="COM_ROLE_COMPLETED"/>
            <call-service service-name="createCommunicationEventRoleWithoutPermission" in-map-name="commRole"/>
        </if-not-empty>
        
        <!-- Check Attach File For Forward Email-->
        <if-compare field="parameters.action" value="FORWARD" operator="equals">
            <entity-and entity-name="CommEventContentAssoc" list="commEventContentAssoc">
                <field-map field-name="communicationEventId" from-field="parameters.origCommEventId"/>
            </entity-and>
            <iterate list="commEventContentAssoc" entry="createcommEventContentAssoc">
                <if-not-empty field="createcommEventContentAssoc">               
                    <!-- Create communication event and content association -->
                    <set field="contentAssoc.contentId" from-field="createcommEventContentAssoc.contentId"/>
                    <set field="contentAssoc.communicationEventId" from-field="newEntity.communicationEventId"/>
                    <call-service service-name="createCommEventContentAssoc" in-map-name="contentAssoc"></call-service>
                </if-not-empty>
            </iterate>
        </if-compare>  
    </simple-method>

</simple-methods>
